{"version":3,"sources":["Icon/index.tsx","atoms/InputWithAppendedText.tsx","EditTractOwnership/MineralInterestRow.tsx","EditTractOwnership/NpriRow.tsx","EditTractOwnership/index.tsx","Hooks/useMineralInterestsHandler.ts","App.tsx","serviceWorker.js","i18n.ts","index.tsx"],"names":["library","add","faLevelUpAlt","faMinusCircle","faPlus","faSmile","Icon","iconProps","icon","rotation","getIconProps","InputWithAppendedText","children","inputProps","InputGroup","Form","Control","Append","Text","MineralInterestRow","value","onUpdate","updateProperty","onRemove","t","useTranslation","type","placeholder","defaultValue","owner","onChange","step","interest","lease","Button","variant","onClick","NpriRow","Prepend","className","EditTractOwnership","handlers","thElements","text","colSpan","map","key","Table","flatMap","mineralInterest","id","propertyName","event","updateMineral","mineralId","newValue","currentTarget","removeMineral","npris","npri","updateNpri","npriId","removeNpri","addNpri","addMineral","createNpri","uuidv4","valueOf","is","obj","isNot","useMineralInterestsHandler","initialValue","useState","state","setState","findMineralInterest","find","push","filter","parseFloat","mineral","tractOwnerships","App","Container","Row","Col","Jumbotron","Boolean","window","location","hostname","match","i18n","use","initReactI18next","init","resources","en","translation","Owner","NPRI","Lease","lng","keySeparator","interpolation","escapeValue","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.726a0b2b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport * as Types from 'Types';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IconProp, library } from '@fortawesome/fontawesome-svg-core';\r\nimport {\r\n  faLevelUpAlt,\r\n  faMinusCircle,\r\n  faPlus,\r\n  faSmile,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nlibrary.add(faLevelUpAlt, faMinusCircle, faPlus, faSmile);\r\n\r\nfunction getIconProps(\r\n  icon: Types.Icon\r\n): {\r\n  icon: IconProp;\r\n  rotation?: Types.Rotation;\r\n} {\r\n  switch (icon) {\r\n    case 'add':\r\n      return {\r\n        icon: 'plus',\r\n      };\r\n    case 'indent':\r\n      return {\r\n        icon: 'level-up-alt',\r\n        rotation: 90,\r\n      };\r\n    case 'remove':\r\n      return {\r\n        icon: 'minus-circle',\r\n      };\r\n    case 'smile':\r\n      return {\r\n        icon: 'smile',\r\n      };\r\n  }\r\n}\r\n\r\nconst Icon = ({ icon }: { icon: Types.Icon }) => {\r\n  const iconProps = getIconProps(icon);\r\n\r\n  return <FontAwesomeIcon {...iconProps} />;\r\n};\r\n\r\nexport default Icon;\r\n","import React from 'react';\r\nimport { Form, InputGroup } from 'react-bootstrap';\r\n\r\nfunction InputWithAppendedText({children, ...inputProps}: any) {\r\n    return (\r\n        <InputGroup>\r\n            <Form.Control {...inputProps} />\r\n            <InputGroup.Append>\r\n                <InputGroup.Text>{children}</InputGroup.Text>\r\n            </InputGroup.Append>\r\n        </InputGroup>\r\n    )\r\n}\r\n\r\nexport default InputWithAppendedText;","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { ButtonClickHandler, MineralInterest, UpdateProperty } from 'Types';\r\n\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport Icon from 'Icon';\r\nimport InputWithAppendedText from 'atoms/InputWithAppendedText';\r\n\r\nconst MineralInterestRow = ({\r\n  value,\r\n  onUpdate: updateProperty = () => () => {},\r\n  onRemove = () => {},\r\n}: {\r\n  value: MineralInterest;\r\n  onUpdate?: UpdateProperty<MineralInterest>;\r\n  onRemove?: ButtonClickHandler;\r\n}) => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <tr>\r\n      <td>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder={t('Owner')}\r\n          defaultValue={value.owner}\r\n          onChange={updateProperty('owner')}\r\n        />\r\n      </td>\r\n\r\n      <td>\r\n        <InputWithAppendedText\r\n          type=\"number\"\r\n          step=\"0.01\"\r\n          placeholder={t('Interest')}\r\n          defaultValue={value.interest}\r\n          onChange={updateProperty('interest')}\r\n        >\r\n          %\r\n        </InputWithAppendedText>\r\n      </td>\r\n\r\n      <td>{/* NPRI percentage column */}</td>\r\n\r\n      <td>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder={t('Lease')}\r\n          defaultValue={value.lease}\r\n          onChange={updateProperty('lease')}\r\n        />\r\n      </td>\r\n\r\n      <td>\r\n        <Button variant=\"light\" onClick={onRemove}>\r\n          {Icon({ icon: 'remove' })}\r\n        </Button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default MineralInterestRow;\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { Npri, UpdateProperty, ButtonClickHandler } from 'Types';\r\n\r\nimport { Form, Button, InputGroup } from 'react-bootstrap';\r\nimport Icon from 'Icon';\r\nimport InputWithAppendedText from 'atoms/InputWithAppendedText';\r\n\r\nconst NpriRow = ({\r\n  value,\r\n  onUpdate: updateProperty = () => () => {},\r\n  onRemove = () => {},\r\n}: {\r\n  value: Npri;\r\n  onUpdate?: UpdateProperty<Npri>;\r\n  onRemove?: ButtonClickHandler;\r\n}) => {\r\n  const { t } = useTranslation();\r\n  return (\r\n    <tr>\r\n      <td>\r\n        <InputGroup>\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text className=\"bg-transparent border-0\">\r\n              <Icon icon=\"indent\" />\r\n            </InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder={t('Owner')}\r\n            defaultValue={value.owner}\r\n            onChange={updateProperty('owner')}\r\n          />\r\n        </InputGroup>\r\n      </td>\r\n\r\n      <td>{/* Mineral interest percentage column */}</td>\r\n\r\n      <td>\r\n        <InputWithAppendedText\r\n          type=\"number\"\r\n          step=\"0.01\"\r\n          placeholder={t('Interest')}\r\n          defaultValue={value.interest}\r\n          onChange={updateProperty('interest')}\r\n        >\r\n          %\r\n        </InputWithAppendedText>\r\n      </td>\r\n\r\n      <td>{/* Lease column */}</td>\r\n\r\n      <td>\r\n        <Button variant=\"light\" onClick={onRemove}>\r\n          <Icon icon=\"remove\" />\r\n        </Button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default NpriRow;\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { MineralInterest, Npri } from 'Types';\r\n\r\nimport { Table, Button } from 'react-bootstrap';\r\nimport Icon from 'Icon';\r\nimport MineralInterestRow from './MineralInterestRow';\r\nimport NpriRow from './NpriRow';\r\nimport { Handlers } from 'Hooks/useMineralInterestsHandler';\r\n\r\nconst EditTractOwnership = ({\r\n  value = [],\r\n  onChange: handlers,\r\n}: {\r\n  value: MineralInterest[];\r\n  onChange: Handlers;\r\n}) => {\r\n  const { t } = useTranslation();\r\n\r\n  const thElements = (function () {\r\n    interface TableHeader {\r\n      text: string;\r\n      colSpan?: number;\r\n    }\r\n\r\n    const toThElement = ({ text, colSpan }: TableHeader) => (\r\n      <th key={text} colSpan={colSpan}>\r\n        {text}\r\n      </th>\r\n    );\r\n\r\n    const tableHeaders: TableHeader[] = [\r\n      { text: t('Owner') },\r\n      { text: t('Mineral Interest') },\r\n      { text: t('NPRI') },\r\n      { text: t('Lease'), colSpan: 2 },\r\n    ];\r\n\r\n    return tableHeaders.map(toThElement);\r\n  })();\r\n\r\n  const toRows = (mineralInterest: MineralInterest) => [\r\n    <MineralInterestRow\r\n      key={mineralInterest.id}\r\n      value={mineralInterest}\r\n      onUpdate={(propertyName) => (event) =>\r\n        handlers.updateMineral({\r\n          mineralId: mineralInterest.id,\r\n          propertyName,\r\n          newValue: event.currentTarget.value,\r\n        })}\r\n      onRemove={() => handlers.removeMineral({ mineralId: mineralInterest.id })}\r\n    />,\r\n    ...mineralInterest.npris.map((npri: Npri) => (\r\n      <NpriRow\r\n        key={npri.id}\r\n        value={npri}\r\n        onUpdate={(propertyName) => (event) =>\r\n          handlers.updateNpri({\r\n            mineralId: mineralInterest.id,\r\n            npriId: npri.id,\r\n            propertyName,\r\n            newValue: event.currentTarget.value,\r\n          })}\r\n        onRemove={() =>\r\n          handlers.removeNpri({\r\n            mineralId: mineralInterest.id,\r\n            npriId: npri.id,\r\n          })\r\n        }\r\n      />\r\n    )),\r\n    <tr>\r\n      <td className=\"text-right\">\r\n        <Button\r\n          variant=\"light\"\r\n          onClick={() => handlers.addNpri({ mineralId: mineralInterest.id })}\r\n        >\r\n          <Icon icon=\"add\" /> Add NPRI\r\n        </Button>\r\n      </td>\r\n      <td colSpan={5} />\r\n    </tr>,\r\n  ];\r\n\r\n  return (\r\n    <Table>\r\n      <thead>\r\n        <tr>{thElements}</tr>\r\n      </thead>\r\n      <tbody>\r\n        {value.flatMap(toRows)}\r\n        <tr>\r\n          <td className=\"text-right\">\r\n            <Button variant=\"light\" onClick={handlers.addMineral}>\r\n              <Icon icon=\"add\" /> Add Mineral Interest\r\n            </Button>\r\n          </td>\r\n          <td colSpan={5} />\r\n        </tr>\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default EditTractOwnership;\r\n","import { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { MineralInterest, Npri, UpdatablePropertyName } from 'Types';\n\ninterface Handlers {\n  addMineral: () => void;\n  removeMineral: (action: { mineralId: MineralInterest['id'] }) => void;\n  updateMineral: (action: {\n    mineralId: MineralInterest['id'];\n    propertyName: UpdatablePropertyName<MineralInterest>;\n    newValue: string;\n  }) => void;\n\n  addNpri: (action: { mineralId: MineralInterest['id'] }) => void;\n  removeNpri: (action: {\n    mineralId: MineralInterest['id'];\n    npriId: Npri['id'];\n  }) => void;\n  updateNpri: (action: {\n    mineralId: MineralInterest['id'];\n    npriId: Npri['id'];\n    propertyName: UpdatablePropertyName<Npri>;\n    newValue: string;\n  }) => void;\n}\n\nfunction createNpri(): Npri {\n  return {\n    id: uuidv4(),\n    interest: 0,\n    owner: '',\n  };\n}\n\nconst valueOf = (propertyName: string) => ({\n  is: (value: any) => (obj: any) => obj[propertyName] === value,\n  isNot: (value: any) => (obj: any) => obj[propertyName] !== value,\n});\n\nfunction useMineralInterestsHandler(initialValue: MineralInterest[]) {\n  const [[...state], setState] = useState(initialValue);\n\n  const findMineralInterest = (mineralId: string) =>\n    state.find(valueOf('id').is(mineralId));\n\n  const handlers: Handlers = {\n    addMineral: () => {\n      state.push({\n        ...createNpri(),\n        npris: [],\n        lease: '',\n      });\n\n      setState(state);\n    },\n\n    removeMineral: ({ mineralId }) => {\n      setState(state.filter(valueOf('id').isNot(mineralId)));\n    },\n\n    updateMineral: ({ mineralId, propertyName, newValue }) => {\n      const mineralInterest = findMineralInterest(mineralId);\n\n      if (!mineralInterest) {\n        return;\n      }\n\n      if (propertyName === 'interest') {\n        mineralInterest.interest = parseFloat(newValue);\n      } else {\n        mineralInterest[propertyName] = newValue;\n      }\n\n      setState(state);\n    },\n\n    addNpri: ({ mineralId }) => {\n      const mineral = findMineralInterest(mineralId);\n      mineral?.npris.push(createNpri());\n\n      setState(state);\n    },\n\n    removeNpri: ({ mineralId, npriId }) => {\n      const mineral = findMineralInterest(mineralId);\n      if (mineral) {\n        mineral.npris = mineral?.npris.filter(valueOf('id').isNot(npriId));\n      }\n\n      setState(state);\n    },\n\n    updateNpri: ({ mineralId, npriId, propertyName, newValue }) => {\n      const mineral = findMineralInterest(mineralId);\n      const npri = mineral?.npris.find(valueOf('id').is(npriId));\n\n      if (!npri) {\n        return;\n      }\n\n      if (propertyName === 'interest') {\n        npri.interest = parseFloat(newValue);\n      } else {\n        npri[propertyName] = newValue;\n      }\n\n      setState(state);\n    },\n  };\n\n  return { state, handlers };\n}\n\nexport default useMineralInterestsHandler;\nexport type { Handlers };\n","import React from 'react';\r\nimport { Col, Container, Jumbotron, Row } from 'react-bootstrap';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { MineralInterest } from './Types';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './App.css';\r\n\r\nimport EditTractOwnership from './EditTractOwnership';\r\nimport Icon from './Icon';\r\nimport useMineralInterestsHandler from 'Hooks/useMineralInterestsHandler';\r\n\r\nconst tractOwnerships: MineralInterest[] = [\r\n  {\r\n    id: uuidv4(),\r\n    owner: 'Luke Skywalker',\r\n    interest: 0.5,\r\n    lease: 'Tatooine Lease',\r\n    npris: [\r\n      {\r\n        id: uuidv4(),\r\n        owner: 'Leia Organa',\r\n        interest: 0.45,\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        owner: 'Han Solo',\r\n        interest: 0.15,\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nfunction App() {\r\n  const { state, handlers } = useMineralInterestsHandler(tractOwnerships);\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col>\r\n          <Jumbotron>\r\n            <h1>\r\n              Landdox Code Challenge <Icon icon=\"smile\" />\r\n            </h1>\r\n          </Jumbotron>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <EditTractOwnership value={state} onChange={handlers} />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\n// the translations\n// (tip move them in a JSON file and import them)\nconst resources = {\n  en: {\n    translation: {\n      Owner: 'Owner',\n      'Mineral Interest': 'Mineral Interest',\n      NPRI: 'NPRI',\n      Lease: 'Lease',\n    },\n  },\n};\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources,\n    lng: 'en',\n\n    keySeparator: false, // we do not use keys in form messages.welcome\n\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    },\n  });\n\nexport default i18n;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './i18n';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}